// auto generated by rpc-ts-gen don't break
/* tslint-disable */
/* eslint-disable */

export interface OpenReq {
  clientVersion: string;
  properties: Record<string, string>;
  topics: string[];
  group: string;
  clientToken?: string;
  requestId: string;
  type: string;
}

export interface OpenRespResult {
  clientToken: string;
  nextHeartbeatDeadline: string;
}

export interface OpenResp {
  clientToken: string;
  requestId: string;
  code: string;
  msg: string;
  result: OpenRespResult;
}

export interface HeartbeatReq {
  clientToken: string;
  requestId: string;
  properties?: Record<string, string>;
}

export interface CloseReq {
  clientToken: string;
  requestId: string;
  properties?: Record<string, string>;
}

export interface SendMessage {
  topic: string;
  tags: string[];
  shardingKey: string;
  keys: string[];
  properties: Record<string, string>;
  body: string;
}

export interface SendReq {
  clientToken: string;
  requestId: string;
  message: SendMessage;
}

export interface MessageMeta {
  topic: string;
  queueId: number;
  queueOffset: string;
  /** onlytransactionalmessagehasmsgHandle */
  msgId: string;
  msgHandle?: string;
}
export type SendResult = MessageMeta;

export interface SendResp {
  clientToken: string;
  requestId: string;
  code: string;
  msg: string;
  result: SendResult;
}

export interface ConsumeReq {
  clientToken: string;
  requestId: string;
  maxMessageNumber?: number;
  maxWaitTimeMs?: number;
}

export interface ConsumeMessage {
  topic: string;
  queueId: number;
  queueOffset: string;
  bornTimeStamp: string;
  bornHost: string;
  storeTimeStamp: string;
  msgId: string;
  reconsumeTimes: number;
  keys: string[];
  tags: string[];
  properties: Record<string, string>;
  body: string;
  bodyCRC: string;
  msgHandle: string;
}

export interface ConsumeResult {
  messages: ConsumeMessage[];
}

export interface ConsumeResp {
  clientToken: string;
  requestId: string;
  code: string;
  msg: string;
  result: ConsumeResult;
}

export interface AckReq {
  clientToken: string;
  requestId: string;
  acks: string[];
  nacks: string[];
}

export interface FailAckHandleEntry {
  msgHandle: string;
  code: string;
  msg: string;
}

export interface AckResult {
  failHandles: FailAckHandleEntry[];
}

export interface AckResp {
  clientToken: string;
  requestId: string;
  code: string;
  msg: string;
  result: AckResult;
}
